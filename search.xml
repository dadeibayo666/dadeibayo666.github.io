<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>暑期前端学习Day3</title>
      <link href="/2025/07/31/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A003/"/>
      <url>/2025/07/31/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A003/</url>
      
        <content type="html"><![CDATA[<h1 id="暑期前端学习Day3"><a href="#暑期前端学习Day3" class="headerlink" title="暑期前端学习Day3"></a>暑期前端学习Day3</h1><h2 id="6-HTML的常用标签（下）"><a href="#6-HTML的常用标签（下）" class="headerlink" title="6. HTML的常用标签（下）"></a>6. HTML的常用标签（下）</h2><h3 id="6-1-注释标签和特殊字符"><a href="#6-1-注释标签和特殊字符" class="headerlink" title="6.1 注释标签和特殊字符"></a>6.1 注释标签和特殊字符</h3><h4 id="6-1-1-注释标签"><a href="#6-1-1-注释标签" class="headerlink" title="6.1.1 注释标签"></a>6.1.1 注释标签</h4><p>如果需要在HTML文件中添加一些阅读注释，需要使用注释标签:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要注释掉内容 --&gt;</span></span><br></pre></td></tr></table></figure><p>在VScode中，只需要按快捷键**Ctrl + ‘ &#x2F; ‘**。</p><h4 id="6-1-2-特殊字符"><a href="#6-1-2-特殊字符" class="headerlink" title="6.1.2 特殊字符"></a>6.1.2 特殊字符</h4><p>在HTML页面中，一些特殊的符号很难或不方便使用，此时我们可以使用下面的字符替代：</p><img src="/img/teshuzifu.png" alt="特殊字符" style="zoom: 50%;" /><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我想在页面中显示“讲   究” --&gt;</span></span><br><span class="line">讲<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>究</span><br><span class="line"><span class="comment">&lt;!-- 我想在页面中显示“4&lt;9” --&gt;</span></span><br><span class="line">4<span class="symbol">&amp;lt;</span>9</span><br><span class="line"><span class="comment">&lt;!-- 我想在页面中显示“5&gt;2” --&gt;</span></span><br><span class="line">5<span class="symbol">&amp;gt;</span>2</span><br></pre></td></tr></table></figure><h3 id="6-2-表格标签"><a href="#6-2-表格标签" class="headerlink" title="6.2 表格标签"></a>6.2 表格标签</h3><h4 id="6-2-1-表格的作用"><a href="#6-2-1-表格的作用" class="headerlink" title="6.2.1 表格的作用"></a>6.2.1 表格的作用</h4><p>表格主要用于<strong>显示、展示数据</strong>，增加可读性，特别是后台展示数据的时候。</p><h4 id="6-2-2-表格的基本语法"><a href="#6-2-2-表格的基本语法" class="headerlink" title="6.2.2 表格的基本语法"></a>6.2.2 表格的基本语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;table&gt;</code>用于定义表格的标签</li><li><code>&lt;tr&gt;</code>用于定义表格中的行，必须嵌套在<code>&lt;table</code>中</li><li><code>&lt;td&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;</code>中，其中td指表格数据，即单元格中的内容</li></ul><p><img src="/img/biaoge.png" alt="表格"></p><h3 id="6-3-表头单元格标签"><a href="#6-3-表头单元格标签" class="headerlink" title="6.3 表头单元格标签"></a>6.3 表头单元格标签</h3><p>一般位于表格第一行或第一列，表头单元格内容加粗居中显示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头单元格内容<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-4-表格属性"><a href="#6-4-表格属性" class="headerlink" title="6.4 表格属性"></a>6.4 表格属性</h3><p>表格标签这部分的属性我们不常用，后面通过CSS来设置。</p><p><img src="/img/biaogeshuxing.png" alt="表格属性"></p><p>这些属性需要写到<code>&lt;table1&gt;</code>里，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-5-表格结构标签"><a href="#6-5-表格结构标签" class="headerlink" title="6.5 表格结构标签"></a>6.5 表格结构标签</h3><p>因为表格可能会很长，所以我们将表格分割为<strong>表格头部</strong>和<strong>表格主体</strong>两大部分。</p><p>在表格标签中，分别用：<code>&lt;thead&gt;</code>标签表示表格头部，<code>&lt;tbody&gt;</code>表示表格主体。</p><img src="/img/thead-tbody.png" alt="thead和tbody" style="zoom: 33%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-6-合并单元格"><a href="#6-6-合并单元格" class="headerlink" title="6.6 合并单元格"></a>6.6 合并单元格</h3><h4 id="6-6-1-合并单元格的方式"><a href="#6-6-1-合并单元格的方式" class="headerlink" title="6.6.1 合并单元格的方式"></a>6.6.1 合并单元格的方式</h4><ul><li>跨行合并：<code>rowspan=&quot;合并单元格的个数&quot;</code></li><li>跨列合并：<code>colspan=&quot;合并单元格的个数&quot;</code></li></ul><p><img src="/img/hebing.png" alt="合并单元格"></p><h4 id="6-6-2-目标单元格：写合并代码"><a href="#6-6-2-目标单元格：写合并代码" class="headerlink" title="6.6.2 目标单元格：写合并代码"></a>6.6.2 目标单元格：写合并代码</h4><ul><li>跨行：最上侧单元格为目标单元格，写合并代码</li><li>跨列：最左侧单元格为目标单元格，写合并代码</li></ul><img src="/img/hebingdaima.png" alt="合并代码" style="zoom:80%;" /><h4 id="6-6-3-合并单元格三步曲"><a href="#6-6-3-合并单元格三步曲" class="headerlink" title="6.6.3 合并单元格三步曲"></a>6.6.3 合并单元格三步曲</h4><ol><li><p>先确定跨行or跨列</p></li><li><p>找到目标单元格，写上合并方式&#x3D;合并的单元格个数。如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>删除多余的单元格</p></li></ol><h3 id="6-7-列表标签"><a href="#6-7-列表标签" class="headerlink" title="6.7 列表标签"></a>6.7 列表标签</h3><p>列表是用于布局的。列表最大的特点就是整齐、有序，它作为布局会更加自由方便。列表分为三大类：<strong>无序列表、有序列表和自定义列表</strong>。</p><p><img src="/img/liebiao.png" alt="列表"></p><h4 id="6-7-1-无序列表"><a href="#6-7-1-无序列表" class="headerlink" title="6.7.1 无序列表"></a>6.7.1 无序列表</h4><p><code>&lt;ul&gt;</code>标签表示HTML页面中的无序列表，列表项使用<code>&lt;li&gt;</code>标签定义。其语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li>无序列表各个列表项之间没有先后顺序</li><li><code>&lt;ul&gt;</code>标签中只能嵌套<code>&lt;li&gt;</code>，不能嵌套其他标签或文字</li><li><code>&lt;li&gt;</code>标签内可以容纳所以元素，如标签<code>&lt;p&gt;</code></li><li>无序列表自带样式，但在实际运用中，我们会使用CSS来设置</li></ul><h4 id="6-7-2-有序列表"><a href="#6-7-2-有序列表" class="headerlink" title="6.7.2 有序列表"></a>6.7.2 有序列表</h4><p>指有一定顺序的列表，各个列表项按照一定顺序排列。</p><p>在HTML中，<code>&lt;ol&gt;</code>标签用于定义有序列表，排序以数字显示，<code>&lt;li&gt;</code>定义列表项。</p><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><code>&lt;ol&gt;</code>只能嵌套<code>&lt;li&gt;</code>标签</li><li><code>&lt;li&gt;</code>标签之间可以容纳所以元素</li><li>有序列表自带样式，实际使用中我们通过CSS设置</li></ul><h4 id="6-7-3-自定义列表"><a href="#6-7-3-自定义列表" class="headerlink" title="6.7.3 自定义列表"></a>6.7.3 自定义列表</h4><p>自定义列表用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><p>在HTML中，<code>&lt;dl&gt;</code>用于定义描述列表，<code>&lt;dt&gt;</code>定义项目&#x2F;名字，<code>&lt;dd&gt;</code>用于描述每个项目&#x2F;名字。基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1的解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1的解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>特点</strong>：</p><ul><li><code>&lt;dl&gt;</code>里只能包含<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>，<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>内可以包含所以标签</li><li><code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>个数没有限制，经常是一个<code>&lt;dt&gt;</code>对应多个<code>&lt;dd&gt;</code></li></ul><h3 id="6-8-表单标签"><a href="#6-8-表单标签" class="headerlink" title="6.8 表单标签"></a>6.8 表单标签</h3><h4 id="6-8-1-表单的组成"><a href="#6-8-1-表单的组成" class="headerlink" title="6.8.1 表单的组成"></a>6.8.1 表单的组成</h4><p>在HTML中，一个完整的表单通常由<strong>表单域、表单控件（表单元素）和提示信息</strong>三部分构成。</p><p><img src="/img/biaodan.png" alt="表单"></p><h4 id="6-8-2-表单域"><a href="#6-8-2-表单域" class="headerlink" title="6.8.2 表单域"></a>6.8.2 表单域</h4><p>表单域是一个包含表单元素的区域。</p><p>在HTML中，<code>&lt;form&gt;</code>标签用于定义表单域，实现用户信息的收集和传递。</p><p><code>&lt;form&gt;</code>会把它范围内的表单元素信息移交给服务器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单域名称&quot;</span>&gt;</span></span><br><span class="line">    各种表单元素控件</span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常用属性</strong>：</p><p><img src="/img/biaodanyu.png" alt="表单域"></p><p>后续可以再进行具体的了解。</p><h4 id="6-8-3-表单控件（表单元素）"><a href="#6-8-3-表单控件（表单元素）" class="headerlink" title="6.8.3 表单控件（表单元素）"></a>6.8.3 表单控件（表单元素）</h4><p>在表单域中可以定义各种表单元素，这些元素允许用户在表单中输入或选择。</p><ol><li><p><code>&lt;input&gt;</code>输入表单元素</p><p>用于收集用户信息，包含一个<strong>type</strong>属性，可以让表单元素设置不同的形态：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;input&gt;</code>为单标签</li><li>type属性设置不同的属性值用来指定不同的控件类型</li></ul><p><img src="/img/type.png" alt="type"></p><ul><li>除type属性外，还有其他属性：</li></ul><p><img src="/img/qitashuxing.png" alt="其他属性"></p><p>注意：name和value是每个表单元素都有的属性，主要给后台人员使用。name是表单元素的名字，要求<strong>单选按钮和复选框要有相同的name值</strong>。value可以实现一打开页面就默认显示你自定义的文本。单选按钮和复选框可以设置checked属性，当页面打开时默认选中这个按钮。maxlength是用户可以在表单元素中输入的最大字符数。</p><ul><li><p>因此，<code>&lt;input&gt;</code>标签通常结构为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;属性值&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;文本&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>&lt;label&gt;</code>标签</p><p><code>&lt;label&gt;</code>标签为input元素定义标注（标签），用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>标签内的文本，浏览器会自动将光标转到或选择对应的表单元素上，增加用户体验。</p><p><strong>语法</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>核心</strong>：<code>&lt;label&gt;</code>标签的<em>for</em>属性应当与相关元素的<em>id</em>属性相同。</p></li><li><p><code>&lt;select&gt;</code>下拉表单元素</p><p>在页面中，如果有多项让用户选择，并且想要节约页面空间时，我们可以使用<code>&lt;select&gt;</code>标签定义下拉列表。</p><img src="/img/xiala.png" alt="下拉列表" style="zoom: 50%;" /><p><strong>语法</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;select&gt;</code>中至少包含一对<code>&lt;option&gt;</code></li><li>在<code>&lt;option&gt;</code>中定义<code>selected=&quot;selected&quot;</code>时，当前项为默认选中项</li></ul></li><li><p><code>textarea</code>文本域元素</p><p>当用户输入内容较多情况下，我们使用<code>&lt;textarea&gt;</code>标签。其用于定义多行文本输入，常见于留言板、评论等。</p><p><strong>语法</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在标签中，有一些属性，如：<code>cols=&quot;每行中的字符数&quot;</code>，<code>rows=&quot;显示的行数&quot;</code>,我们在实际开发中不会使用，一般用CSS来改变大小。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用基础</title>
      <link href="/2025/07/28/learning/Git%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/07/28/learning/Git%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><p>[TOC]</p><p>什么是版本库呢？版本库又名<u>仓库（Repository）</u>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><h5 id="1-创建空目录"><a href="#1-创建空目录" class="headerlink" title="1.创建空目录"></a>1.创建空目录</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure><p><code>pwd</code>:命令用于显示当前目录。</p><h5 id="2-初始化Git仓库"><a href="#2-初始化Git仓库" class="headerlink" title="2.初始化Git仓库"></a>2.初始化Git仓库</h5><p>运行命令<code>git init</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository  in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure><p>这是一个空仓库，<strong>注意：</strong>当前目录下多出来一个<code>.git</code>的目录，用于跟踪管理版本库，不能随意改动。</p><h3 id="添加文件到版本库"><a href="#添加文件到版本库" class="headerlink" title="添加文件到版本库"></a>添加文件到版本库</h3><p>首先，编写一个<code>readme.txt</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这个文件一定要放到<code>learngit</code>目录下（子目录也行）。</p><h5 id="1-把文件添加到仓库"><a href="#1-把文件添加到仓库" class="headerlink" title="1.把文件添加到仓库"></a>1.把文件添加到仓库</h5><p>执行命令<code>git add</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><h5 id="2-把文件提交到仓库"><a href="#2-把文件提交到仓库" class="headerlink" title="2.把文件提交到仓库"></a>2.把文件提交到仓库</h5><p>执行命令<code>git commit</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p><code>-m</code>后输入的是本次提交的说明。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure><p>这里<code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的<code>readme.txt</code>文件）；<code>2 insertions</code>：插入了两行内容(<code>readme.txt</code>有两行内容）</p><p>我们可以多次添加不同文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><h3 id="掌握工作区状态"><a href="#掌握工作区状态" class="headerlink" title="掌握工作区状态"></a>掌握工作区状态</h3><p>我们继续修改<code>readme.txt</code>文件，改成如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，现在，运行<code>git status</code>命令看看结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>这个命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><p>我们需要用<code>git diff</code>这个命令看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line"> Git is free software.</span><br></pre></td></tr></table></figure><p>此时，我们可以放心地提交新的文件。</p><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>Git告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>现在，我们再对<code>readme.txt</code>进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure><p>然后尝试提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">$ git commit -m &quot;append GPL&quot;</span><br><span class="line">[master 1094adb] append GPL</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>每当你觉得文件修改到一定程度的时候，Git可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作。</p><h5 id="1-查看历史纪录"><a href="#1-查看历史纪录" class="headerlink" title="1.查看历史纪录"></a>1.查看历史纪录</h5><p>目前，<code>readme.txt</code>文件一共有3个版本：</p><ul><li>wrote a readme file</li><li>add distributed</li><li>append GPL</li></ul><p>在Git中，我们用<code>git log</code>命令查看历史记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit e475afc93c209a690c39c13a46716e8fa000c366</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:03:36 2018 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 20:59:18 2018 +0800</span><br><span class="line"></span><br><span class="line">    wrote a readme file</span><br></pre></td></tr></table></figure><p><code>git log</code>命令显示从最近到最远的提交日志。可以加上<code>--pretty=oneline</code>参数来简化信息。其中，类似<code>1094adb...</code>的是<code>commit id</code>（版本号），和SVN不一样，Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示。</p><h5 id="2-回退版本"><a href="#2-回退版本" class="headerlink" title="2.回退版本"></a>2.回退版本</h5><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，往上100个版本写成<code>HEAD~100</code>，以此类推。</p><p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure><p>这里使用参数<code>--hard</code>版本会回退到上个版本的已提交状态，同理还有参数<code>--soft</code>,参数<code>--mixed</code>。<code>--soft</code>会回退到上个版本的未提交状态，<code>--mixed</code>会回退到上个版本已添加但未提交的状态。</p><p>使用<code>git reset</code>命令后，之前最新的版本append GPL就不可查看了，如果还想回到之前的最新版本，只需找到目标版本的<code>commit id</code>，由上可知append GPL的<code>commit id</code>是<code>1094adb...</code>于是执行以下命令即可回到指定的未来版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>版本号只需写前几位即可，至少前三位。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><img src="/img/append-GPL.png" style="zoom: 33%;" /><p>改为指向<code>add distributed</code>：</p><img src="/img/distributed.png" style="zoom: 33%;" /><h5 id="3-查看历史命令"><a href="#3-查看历史命令" class="headerlink" title="3.查看历史命令"></a>3.查看历史命令</h5><p>如果找不到之前最新版本的<code>commit id</code>，可以使用命令<code>git reflog</code>，它记录了你的每一次命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure><p>此时我们可以找到append GPL的<code>commit id</code>并回到之前未来版本了。</p><h3 id="工作区与暂存区"><a href="#工作区与暂存区" class="headerlink" title="工作区与暂存区"></a>工作区与暂存区</h3><p>Git有三个主要的工作区域：<u>工作区（working directory）、暂存区（staging area）和版本库（repository）。</u></p><p>工作区是指您电脑文件系统上用于修改文件的目录。在这里，您可以创建、编辑和删除文件。</p><p>暂存区是一个中间状态，它充当了您提交更改的缓冲区。在Git中，您必须明确地将文件添加到暂存区，然后才能将其提交到版本库中。这样做的好处是，您可以对每个更改进行精细控制，并确保只提交需要保存的更改。</p><p>版本库包含Git存储库的所有历史记录和元数据。它是Git存储库的核心组成部分，是由Git自动维护的。（<a href="https://blog.csdn.net/qq_16027093/article/details/130503317">摘自链接</a>）</p><h5 id="1-工作区"><a href="#1-工作区" class="headerlink" title="1.工作区"></a>1.工作区</h5><p>即我们在电脑中能看到的目录：</p><img src="/img/work-area.png" style="zoom: 33%;" /><h5 id="2-版本库"><a href="#2-版本库" class="headerlink" title="2.版本库"></a>2.版本库</h5><p>Git的版本库，即工作区的一个隐藏目录<code>.git</code>。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的<u>暂存区</u>，以及Git为我们自动创建的第一个分支<code>master</code>和指向<code>master</code>的一个指针<code>HEAD</code>。</p><p>回忆我们添加文件于版本库时，分两步执行：</p><ul><li>用<code>git add</code>把文件添加进去（实际上就是把文件修改添加到暂存区）</li><li>用<code>git commit</code>提交更改（实际上就是把暂存区的所有内容提交到当前分支。）</li></ul><p>可以理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>我们来做一个实验，先将<code>readme.txt</code>文件进行修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes.</span><br></pre></td></tr></table></figure><p>然后添加文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#       modified:   readme.txt</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p>再进行第二次修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br></pre></td></tr></table></figure><p>提交文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;git tracks changes&quot;</span><br><span class="line">[master 519219b] git tracks changes</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>提交后，再查看状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>我们发现，第二次的修改没有被提交到Git，我们回顾一下操作过程：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p><p>前面提到，Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD -- readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 76d770f..a9c5755 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,4 +1,4 @@</span><br><span class="line"> Git is a distributed version control system.</span><br><span class="line"> Git is free software distributed under the GPL.</span><br><span class="line"> Git has a mutable index called stage.</span><br><span class="line">-Git tracks changes.</span><br><span class="line">+Git tracks changes of files.</span><br></pre></td></tr></table></figure><p>可见，第二次修改确实没有被提交。</p><p>那怎么提交第二次修改呢？你可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h5 id="1-撤销工作区的修改"><a href="#1-撤销工作区的修改" class="headerlink" title="1.撤销工作区的修改"></a>1.撤销工作区的修改</h5><p>命令<code>git checkout -- readme.txt</code>可以把文件在工作区的修改全部撤销，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>命令中的<code>--</code>很重要，不能漏掉，需要与<code>get checkout</code>命令区分。</p><p>这里分两种情况：</p><p>一种是<code>readme.txt</code>自修改后还<strong>没有被放到暂存区</strong>，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经<strong>添加到暂存区后</strong>，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><h5 id="2-撤销暂存区的修改"><a href="#2-撤销暂存区的修改" class="headerlink" title="2.撤销暂存区的修改"></a>2.撤销暂存区的修改</h5><p>当<code>readme.txt</code>已<code>git add</code>到暂存区了，但还未<code>commit</code>时：</p><p>命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">Mreadme.txt</span><br></pre></td></tr></table></figure><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>最后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>查看状态可知，此时工作区已干净。</p><h5 id="3-版本回退"><a href="#3-版本回退" class="headerlink" title="3.版本回退"></a>3.版本回退</h5><p>当文件被修改且已经<code>commit</code>到版本库中但<strong>还未将自己的本地版本库推送至远程</strong>，我们可以通过版本回退，回退至上一个版本。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>在Git中，删除也是一个修改操作。我们先添加一个新文件<code>test.txt</code>到Git并且提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add test.txt&quot;</span><br><span class="line">[master b84166e] add test.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br></pre></td></tr></table></figure><p>我们通常用命令<code>rm</code>将没用的文件删除，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure><p>此时工作区与版本库已不一致了，命令<code>get status</code>查看工作区状态，Git会告诉我们那些文件被删除。此时有两种情况：</p><ul><li><p>确实要从版本库中删除该文件，那么直接执行<code>git rm</code>删掉，并且<code>git commit</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的。</p></li><li><p>如果不小心删错了文件，只需撤销对文件的删除：</p><p><code>$ git checkout -- test.txt</code></p><p>这里其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p><strong>注意：</strong>从来没有被添加到版本库就被删除的文件，是无法恢复的！</p></li></ul><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>Git是<u>分布式版本控制系统</u>，同一个Git仓库，可以分布到不同的机器上。最早，只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并<strong>没有主次之分</strong>。</p><p>我们知道，至少两台机器才可以搭建远程库，而我们只有一台电脑。其实一台电脑上也是可以克隆多个版本库的，只要不在同一个目录下。但不会有人这么做，因为这会使所有库都挂掉。</p><p>而GitHub解决了这个问题，它为我们提供Git仓库托管服务。只要注册一个GitHub账号，就可以免费获得Git远程仓库。我们先注册一个Github账户，由于我们的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，我们需要进行一些设置：</p><ul><li><p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容，点击“Add Key”，就可以看到已经添加的Key。</p></li></ul><h5 id="1-添加远程库"><a href="#1-添加远程库" class="headerlink" title="1.添加远程库"></a>1.添加远程库</h5><p>我们已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。</p><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库，在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。</p><p>接着，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>michaelliao</code>替换成你自己的GitHub账户名</p><p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 20, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (15/15), done.</span><br><span class="line">Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.</span><br><span class="line">Total 20 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), done.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;.</span><br></pre></td></tr></table></figure><p>这里<code>git push</code>的作用是把本地库的内容推送至远程。</p><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>此后，只要本地作了提交，就可以通过命令<code>git push</code>把本地的<code>master</code>分支最新修改推送至GitHub：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h5 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h5><p>当我们第一次使用Git的<code>clone</code>或者<code>push</code>命令连接GitHub时，会得到一个警告：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;github.com (xx.xx.xx.xx)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入<code>yes</code>回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &#x27;github.com&#x27; (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><h5 id="2-删除远程库"><a href="#2-删除远程库" class="headerlink" title="2.删除远程库"></a>2.删除远程库</h5><p>命令<code>git remote rm &lt;name&gt;</code>可以删除远程库。使用前，先用<code>git remote -v</code>查看远程库信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:michaelliao/learn-git.git (fetch)</span><br><span class="line">origin  git@github.com:michaelliao/learn-git.git (push)</span><br></pre></td></tr></table></figure><p>然后，根据名字删除，比如删除<code>origin</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p><h5 id="3-从远程库克隆"><a href="#3-从远程库克隆" class="headerlink" title="3.从远程库克隆"></a>3.从远程库克隆</h5><p>首先，登陆GitHub，创建一个新的仓库，名字叫<code>gitskills</code>。</p><p>接着，我们勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。创建完毕后，可以看到<code>README.md</code>文件。</p><p>现在，远程库已经准备好了，下一步是用命令<code>git clone</code>克隆一个本地库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:michaelliao/gitskills.git</span><br><span class="line">Cloning into &#x27;gitskills&#x27;...</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 3</span><br><span class="line">Receiving objects: 100% (3/3), done.</span><br></pre></td></tr></table></figure><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用<code>ssh</code>，但也可以使用<code>https</code>等其他协议。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期前端学习Day2</title>
      <link href="/2025/07/28/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A002/"/>
      <url>/2025/07/28/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A002/</url>
      
        <content type="html"><![CDATA[<h1 id="暑期前端学习Day2"><a href="#暑期前端学习Day2" class="headerlink" title="暑期前端学习Day2"></a>暑期前端学习Day2</h1><hr><h2 id="5-HTML常用标签（上）"><a href="#5-HTML常用标签（上）" class="headerlink" title="5. HTML常用标签（上）"></a>5. HTML常用标签（上）</h2><h3 id="5-1-标题标签"><a href="#5-1-标题标签" class="headerlink" title="5.1 标题标签"></a>5.1 标题标签</h3><p>HTML提供了6个等级的网页标题，即<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span> 我是一级标题 <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签语义</strong>：作为标题使用，并依据重要性递减。</p><p><strong>特点</strong>：字体加粗，字号由一至六依次递减；独占一行。</p><h3 id="5-2-段落和换行标签"><a href="#5-2-段落和换行标签" class="headerlink" title="5.2 段落和换行标签"></a>5.2 段落和换行标签</h3><h4 id="5-2-1-段落标签"><a href="#5-2-1-段落标签" class="headerlink" title="5.2.1 段落标签"></a>5.2.1 段落标签</h4><p>在HTML标签中，<code>&lt;p&gt;</code>标签用于<strong>定义段落</strong>，它可以将整个网页分为若干个段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 我是一个段落标签 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签语义</strong>：将HTML文档分段。</p><p><strong>特点</strong>：根据浏览器窗口自动换行；段与段之间保留有空隙。</p><h4 id="5-2-2-换行标签"><a href="#5-2-2-换行标签" class="headerlink" title="5.2.2 换行标签"></a>5.2.2 换行标签</h4><p>如果希望某段文本强制换行显示，就需要使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签语义</strong>：强制换行。</p><p><strong>特点</strong>：单标签；仅简单地开始新的一行，强行分行后段之间没有空隙。</p><h3 id="5-3-文本格式化标签"><a href="#5-3-文本格式化标签" class="headerlink" title="5.3 文本格式化标签"></a>5.3 文本格式化标签</h3><p>在网页中，有时需要为文字设置粗体、斜体或下划线，这时需要在HTML中使用文本格式化标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 加粗,建议strong --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>需要加粗的文字<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>需要加粗的文字<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 倾斜，建议em --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>需要倾斜的文字<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜的文字<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除线，划线居中，建议del --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 下划线，划线在底部，建议ins --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-4和标签"><a href="#5-4和标签" class="headerlink" title="5.4&lt;div&gt;和&lt;span&gt;标签"></a>5.4<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>标签</h3><p>这两个标签没有语义，它们就像一个盒子，用于装内容。</p><p>就像网页中的：</p><p><img src="/img/hezi.png" alt="盒子"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>领券中心<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>9折限定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>新浪<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/img/div-span.png" alt="跨行显示" style="zoom:50%;" /><p><strong>特点</strong>：</p><ul><li><code>&lt;div&gt;</code>的文字独占一行，但<code>&lt;span&gt;</code>可以一行多个，每个盒子之间有间距。</li><li><code>&lt;div&gt;</code>就像大盒子，<code>&lt;span&gt;</code>就像小盒子。两者都用于布局。</li></ul><h3 id="5-5-图像标签和路径"><a href="#5-5-图像标签和路径" class="headerlink" title="5.5 图像标签和路径"></a>5.5 图像标签和路径</h3><h4 id="5-5-1-图像标签"><a href="#5-5-1-图像标签" class="headerlink" title="5.5.1 图像标签"></a>5.5.1 图像标签</h4><p>在HTML中，<code>&lt;img&gt;</code>标签用于定义HTML页面中的图像。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图像URL&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>要求图片与html文件在同一文件夹（相对路径方便显示）。</p><p><strong>src</strong>是<code>&lt;img&gt;</code>标签的必须属性，用于指定图像文件的路径和文件名。</p><p><strong>补充</strong>：图像标签的其他属性：</p><p><img src="/img/img-attribute.png" alt="图像标签属性"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- alt 替换文本 当图像无法显示时用文字替换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kakaxi1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;kakaxi&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- title 提示文本 鼠标放在图片上时提示的文字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kakaxi.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;kakaxi&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是卡卡西&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- width 给图像设定宽度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kakaxi.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;kakaxi&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是卡卡西&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- height 给图像设定高度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kakaxi.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;kakaxi&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是卡卡西&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- border 给图像设定边框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;kakaxi.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;kakaxi&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是卡卡西&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">border</span>=<span class="string">&quot;15&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>图像标签可以有多个属性，必须写在标签名后面。</li><li>属性不分先后顺序，标签名与属性，属性与属性之间必须以空格分开。</li><li>属性采用键值对的格式，即<code>key= &quot;value&quot;</code>的格式，属性&#x3D; “属性值”。</li></ul><h4 id="5-5-2-路径"><a href="#5-5-2-路径" class="headerlink" title="5.5.2 路径"></a>5.5.2 路径</h4><ol><li><p><u>目录文件夹与根目录</u></p><p>目录文件夹：放置网页的素材，如html文件和img文件夹。</p><p>根目录：目录文件夹的第一层。</p></li><li><p><u>VScode打开目录文件夹</u></p><p>文件—打开文件夹或拖拽文件夹至VScode界面。</p></li><li><p><u>相对路径与绝对路径</u></p><p><strong>相对路径</strong>：以引用文件所在位置为参考基础而建立的目录路径。简单来说就是<strong>图片相对于HTML页面的位置</strong>。</p><p><img src="/img/xiangduilujing.png" alt="相对路径"></p><p><strong>绝对路径</strong>：指目录下的绝对位置，通常从盘符开始。如“E:\h5c3\H5C3学习笔记”。还有一种叫网络上的绝对地址，如“<a href="https://img-home.csdnimg.cn/images/20201124032511.png%E2%80%9D">https://img-home.csdnimg.cn/images/20201124032511.png”</a></p></li></ol><h3 id="5-6-超链接标签"><a href="#5-6-超链接标签" class="headerlink" title="5.6 超链接标签"></a>5.6 超链接标签</h3><p>在HTML标签中，<code>&lt;a&gt;</code>标签用于定义超链接，作用是从一个界面链接到另一个界面。</p><h4 id="5-6-1-链接的语法格式"><a href="#5-6-1-链接的语法格式" class="headerlink" title="5.6.1 链接的语法格式"></a>5.6.1 链接的语法格式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span> 文本或图像 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性作用</strong>：</p><p><img src="/img/chaolianjie.png" alt="超链接"></p><p>​<code>_self</code>是将当前网页替换为目标网页，而<code>_blank</code>是在新窗口打开目标网页。</p><h4 id="5-6-2-链接分类"><a href="#5-6-2-链接分类" class="headerlink" title="5.6.2 链接分类"></a>5.6.2 链接分类</h4><ul><li><p>外部链接，例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里<code>target</code>默认为<code>_self</code>。</p></li><li><p>内部链接：网站内部页面之间的相互链接，直接链接内部网页名称即可。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;index.html&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>空链接：如果没有确定的链接目标，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>下载链接：如果<code>href</code>里面地址是一个文件(<code>.exe</code>)或压缩包，会下载这个文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx.zip&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>网页元素链接：网页中的各种元素，如文本、图像、表格、音频等都可以添加超链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>锚点链接：点击链接可以快速定位到页面中的某个位置。</p><p>在链接文本的href属性中，设置属性值为**#名字**的形式，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#two&quot;</span>&gt;</span>第二季<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>找到目标位置标签，里面添加一个<code>id=刚才的名字</code>，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第二季介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><a class="btn-beautify block right outline larger" href="https://dadeibayo666.github.io/" title="暑期前端学习03"><i class="far fa-hand-point-right"></i><span>暑期前端学习03</span></a>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑期前端学习Day1</title>
      <link href="/2025/07/25/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A001/"/>
      <url>/2025/07/25/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A001/</url>
      
        <content type="html"><![CDATA[<h1 id="暑期前端学习Day1"><a href="#暑期前端学习Day1" class="headerlink" title="暑期前端学习Day1"></a>暑期前端学习Day1</h1><h2 id="1-基础学习路线"><a href="#1-基础学习路线" class="headerlink" title="1.基础学习路线"></a>1.基础学习路线</h2><p>目的：精通网络布局</p><p>学习内容：HTML5、CSS3、H5C3提高。</p><p>验收：品优购网站</p><h2 id="2-网页与HTML"><a href="#2-网页与HTML" class="headerlink" title="2.网页与HTML"></a>2.网页与HTML</h2><p>HTML是<strong>超文本标记语言</strong>，用于描述网页。它不是编程语言，而是标记语言（标签）。</p><p>超文本：超越文本限制，可以加入图像、音频等，还可以从一个文件通过链接跳转到另一个文件。</p><h2 id="3-Web标准"><a href="#3-Web标准" class="headerlink" title="3.Web标准"></a>3.Web标准</h2><p>Web标准是由W3C组织和其他标准化组织制定的一系列标准集合。</p><p>主要包括<strong>结构、表现、行为</strong>。其中结构最重要。</p><p><img src="/img/Web-standard-17534310046412.png"></p><p>结构具体表现为：</p><p><img src="/img/structure.png"></p><p>只有单纯的文字、图片等。</p><p>表现是对结构的美化。</p><h2 id="4-HTML标签"><a href="#4-HTML标签" class="headerlink" title="4.HTML标签"></a>4.HTML标签</h2><h3 id="4-1-语法规范"><a href="#4-1-语法规范" class="headerlink" title="4.1 语法规范"></a>4.1 语法规范</h3><h4 id="4-1-1-基础语法规范"><a href="#4-1-1-基础语法规范" class="headerlink" title="4.1.1 基础语法规范"></a>4.1.1 基础语法规范</h4><ul><li>由<strong>尖括号包围</strong>的关键词</li><li>通常<strong>成对出现</strong>，称为双标签</li><li>有些特殊标签必须是单标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>  //双标签，其中<span class="tag">&lt;<span class="name">html</span>&gt;</span>为开始标签，<span class="tag">&lt;/<span class="name">html</span>&gt;</span>为结束标签</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>         //单标签</span><br></pre></td></tr></table></figure><h4 id="4-1-2-标签关系"><a href="#4-1-2-标签关系" class="headerlink" title="4.1.2 标签关系"></a>4.1.2 标签关系</h4><p>分为两类：<strong>包含关系</strong>和<strong>并列关系</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//包含关系</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">//并列关系</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-基本结构标签"><a href="#4-2-基本结构标签" class="headerlink" title="4.2 基本结构标签"></a>4.2 基本结构标签</h3><h4 id="4-2-1-第一个HTML"><a href="#4-2-1-第一个HTML" class="headerlink" title="4.2.1 第一个HTML"></a>4.2.1 第一个HTML</h4><p>每个网页都会有一个基本的结构标签（骨架标签），页面内容也是在这个框架上书写。</p><p><img src="/img/basic-structure-label.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span> 第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        学的头发掉渣</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中的效果：</p><p><img src="/img/first-html-17534311144707.png"></p><h3 id="4-3-开发工具"><a href="#4-3-开发工具" class="headerlink" title="4.3 开发工具"></a>4.3 开发工具</h3><h4 id="4-3-1-VScode插件与快捷键"><a href="#4-3-1-VScode插件与快捷键" class="headerlink" title="4.3.1 VScode插件与快捷键"></a>4.3.1 VScode插件与快捷键</h4><p>我们使用VScode进行HTML开发。需要下载一些基础的插件：</p><ul><li>Auto Rename Tag</li><li>格式化代码（VScode自带）</li><li>open in browser：浏览器预览</li><li>Live Server：实时预览</li><li>vscode-icons：设置文件图标</li><li>Easy LESS：编译less文件</li></ul><p>此外，还需要记住一些VScode的快捷键：</p><ul><li>快速复制一行：<strong>Shift+Alt+下箭头（上箭头）</strong></li><li>选定多个相同单词：<strong>双击选中单词，再Ctrl+D</strong>，这样可以同时更改多个单词</li><li>添加多个光标：<strong>Ctrl+Alt+上箭头（下箭头）</strong>，可以在多行同时输入</li><li>全局替换某个单词：<strong>Ctrl+H，并选择第二个按钮（第一个为单个替换）</strong></li><li>快速定位到某一行：<strong>Ctrl+G</strong></li><li>选择某个区块：<strong>按住Shift+Alt，然后拖动鼠标选区域</strong></li><li>放大缩小编辑器界面：<strong>Ctrl + ‘ + ’（‘ - ’）</strong></li><li>单行注释：<strong>Ctrl + ‘ &#x2F; ’</strong></li><li>多行注释：<strong>选中区域，Shift+Alt+A</strong>，本人修改为<strong>Ctrl+Shift+‘ &#x2F; ’</strong></li><li>自定义快捷键：设置——键盘快捷方式——搜索想要更改的快捷键并更改</li></ul><h4 id="4-3-2-关于VScode工具生成的骨架标签"><a href="#4-3-2-关于VScode工具生成的骨架标签" class="headerlink" title="4.3.2 关于VScode工具生成的骨架标签"></a>4.3.2 关于VScode工具生成的骨架标签</h4><ol><li><p><code>&lt;!DOCTYPE&gt;</code>文本声明标签（不属于HTML标签），说明当前页面使用的HTML版本。如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>告诉浏览器这个页面采用HTML5显示。</p></li><li><p>lang语言种类，用于定义当前文档显示的语言，en定义为英文，zh-CN定义为中文。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>   //网页为英文</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>规定HTML文档使用<strong>万国码</strong>字符编码。</p></li></ol><a class="btn-beautify block right outline larger" href="https://dadeibayo666.github.io/2025/07/28/h5c3-learning/%E6%9A%91%E6%9C%9F%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A002/" title="暑期前端学习02"><i class="far fa-hand-point-right"></i><span>暑期前端学习02</span></a>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>file_management_system</title>
      <link href="/2025/01/26/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/01/26/%E5%9F%BA%E4%BA%8EC%E8%AF%AD%E8%A8%80%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%8A%9F%E8%83%BD%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基于C语言的简单文件管理系统：功能与实现"><a href="#基于C语言的简单文件管理系统：功能与实现" class="headerlink" title="基于C语言的简单文件管理系统：功能与实现"></a>基于C语言的简单文件管理系统：功能与实现</h1><p>文件管理是日常操作系统中非常基础且重要的功能，而用编程语言实现一个文件管理系统，可以帮助我们深入理解文件操作的原理和系统命令的交互。今天，我分享一个使用 <strong>C语言</strong> 实现的简单文件管理系统，它不仅能让你熟悉 C 语言的系统调用，还能帮助你掌握如何与 Linux 系统命令集成。</p><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>这个文件管理系统是基于 Linux命令实现的轻量级工具，通过命令行交互式界面，提供以下功能：</p><ul><li>文件复制</li><li>文件删除</li><li>文件压缩</li><li>文件解压</li></ul><p>该系统适合初学者理解<strong>C语言文件操作</strong> 和<strong>Linux系统命令集成</strong> ，同时可以作为一个小型工具使用。</p><h3 id="项目功能与界面"><a href="#项目功能与界面" class="headerlink" title="项目功能与界面"></a>项目功能与界面</h3><h5 id="程序菜单"><a href="#程序菜单" class="headerlink" title="程序菜单"></a>程序菜单</h5><p>用户运行程序后，会看到一下交互界面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">********************************************</span><br><span class="line">**               文件管理系统               ** </span><br><span class="line">********************************************</span><br><span class="line">**            请选择功能并输入指令           **</span><br><span class="line">********************************************</span><br><span class="line">                  1.复制                     </span><br><span class="line">                  2.删除                     </span><br><span class="line">                  3.压缩                     </span><br><span class="line">                  4.解压                     </span><br><span class="line">                  5.退出                    </span><br><span class="line">*********************************************</span><br><span class="line">请输入(1~5):</span><br></pre></td></tr></table></figure><h5 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h5><ol><li><p>文件复制</p><p>当用户选择1时，程序会提示输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入(1~5):1</span><br><span class="line"></span><br><span class="line">请输入指令(cp &lt;source flie&gt; &lt;target file&gt;):</span><br><span class="line">cp 111.txt 222.txt</span><br><span class="line">文件复制成功！</span><br><span class="line">sh: 1 pause:not found</span><br><span class="line">sh: 1 cls:not found</span><br></pre></td></tr></table></figure><p>程序会调用系统命令<code>cp example.txt backup.txt</code>,实现文件复制。</p></li><li><p>文件压缩</p><p>选择3，用户可以输入要压缩的文件以及目标压缩文件的名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入(1~5):3</span><br><span class="line"></span><br><span class="line">请输入指令(compress &lt;file name&gt; &lt;compressed package name&gt;):</span><br><span class="line">compress 111.txt deco</span><br><span class="line">文件压缩成功！</span><br><span class="line">sh: 1 pause:not found</span><br><span class="line">sh: 1 cls:not found</span><br></pre></td></tr></table></figure><p>程序会通过<code>tar -czf backup.tar example_folder/</code>完成压缩。</p></li><li><p>错误处理</p><p>如果用户输入了错误选项，或是输入了错误的指令，程序会提示错误信息，并要求重新输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入(1~5):abc</span><br><span class="line"></span><br><span class="line">Error!请重新输入</span><br></pre></td></tr></table></figure></li></ol><h3 id="项目实现细节"><a href="#项目实现细节" class="headerlink" title="项目实现细节"></a>项目实现细节</h3><h4 id="1-系统调用集成"><a href="#1-系统调用集成" class="headerlink" title="1.系统调用集成"></a>1.系统调用集成</h4><p>核心功能通过调用Linux命令实现：</p><ul><li><p><strong>文件复制</strong> ：调用<code>system(&quot;cp &lt;source file&gt; &lt;target file&gt;&quot;);</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void copyfile()</span><br><span class="line">&#123;</span><br><span class="line">    char command[10];</span><br><span class="line">    char f1[MAX_PATH], f2[MAX_PATH];     //源文件与目标文件的路径</span><br><span class="line">    printf(&quot;请输入指令(cp &lt;source flie&gt; &lt;target file&gt;):\n&quot;);</span><br><span class="line">    scanf(&quot;%s %s %s&quot;, command, f1, f2);</span><br><span class="line">    if(strcmp(command, &quot;cp&quot;) != 0)</span><br><span class="line">        printf(&quot;Error!\n&quot;);</span><br><span class="line">    else&#123;</span><br><span class="line">        //调用cp</span><br><span class="line">        char p[MAX_PATH * 2];</span><br><span class="line">        strcpy(p, &quot;cp &quot;); strcat(p, f1); strcat(p, &quot; &quot;); strcat(p, f2);</span><br><span class="line">        if (system(p) == 0)&#123;</span><br><span class="line">            printf(&quot;文件复制成功！\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;文件复制失败！\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>文件删除</strong> ：调用<code>system(&quot;rm &lt;file name&gt;&quot;);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void deletefile()</span><br><span class="line">&#123;</span><br><span class="line">    char command[10];</span><br><span class="line">    char f1[MAX_PATH];</span><br><span class="line">    printf(&quot;请输入指令(rm &lt;flie name&gt;):\n&quot;);</span><br><span class="line">    scanf(&quot;%s%s&quot;, command, f1);</span><br><span class="line">    if(strcmp(command, &quot;rm&quot;) != 0)</span><br><span class="line">        printf(&quot;Error!\n&quot;);</span><br><span class="line">    else&#123;</span><br><span class="line">        //调用rm</span><br><span class="line">        char p[MAX_PATH];</span><br><span class="line">        strcpy(p, &quot;rm &quot;); strcat(p, f1);</span><br><span class="line">        if(system(p) == 0)&#123;</span><br><span class="line">            printf(&quot;文件删除成功！\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;文件删除失败！\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>文件压缩</strong> ：调用<code>system(&quot;tar -czf archive.tar.gz folder/&quot;);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void zipfile()&#123;</span><br><span class="line">    char command[20];</span><br><span class="line">    char f1[MAX_PATH], f2[MAX_PATH];</span><br><span class="line">    printf(&quot;请输入指令(compress &lt;file name&gt; &lt;compressed package name&gt;):\n&quot;);</span><br><span class="line">    scanf(&quot;%s%s%s&quot;, command, f1, f2);</span><br><span class="line">    if(strcmp(command, &quot;compress&quot;) != 0)</span><br><span class="line">        printf(&quot;Error!\n&quot;);</span><br><span class="line">    else&#123;</span><br><span class="line">        //调用tar -czf</span><br><span class="line">        char p[MAX_PATH * 2];</span><br><span class="line">        strcpy(p, &quot;tar -czf &quot;); strcat(p, f2); strcat(p, &quot;.tar.gz &quot;); strcat(p, f1);</span><br><span class="line">        if(system(p) == 0)&#123;</span><br><span class="line">            printf(&quot;文件压缩成功！\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;文件压缩失败！\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>文件解压</strong> ：调用<code>system(&quot;tar -zxvf archive.tar.gz -C folder/&quot;);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void unzipfile()</span><br><span class="line">&#123;</span><br><span class="line">    char command[20];</span><br><span class="line">    char f1[MAX_PATH], path[MAX_PATH];</span><br><span class="line">    printf(&quot;请输入指令(decompress &lt;compressed package name&gt; &lt;target directory&gt;):\n&quot;);</span><br><span class="line">    scanf(&quot;%s%s%s&quot;, command, f1, path);</span><br><span class="line">    if(strcmp(command, &quot;decompress&quot;)!= 0)</span><br><span class="line">        printf(&quot;Error!\n&quot;);</span><br><span class="line">    else&#123;</span><br><span class="line">        //调用tar -zxvf</span><br><span class="line">        char p[MAX_PATH * 2];</span><br><span class="line">        strcpy(p, &quot;tar -zxvf &quot;); strcat(p, f1); strcat(p, &quot;.tar.gz &quot;); strcat(p, &quot;-c &quot;); strcat(p, path);</span><br><span class="line">            if(system(p) == 0)&#123;</span><br><span class="line">            printf(&quot;文件压缩成功！\n&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            printf(&quot;文件压缩失败！\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-菜单交互界面"><a href="#2-菜单交互界面" class="headerlink" title="2.菜单交互界面"></a>2.菜单交互界面</h4><p>程序提供了一个简单易用的菜单交互界面，用户可按照提示完成操作，界面如上。</p><h4 id="3-头文件展示"><a href="#3-头文件展示" class="headerlink" title="3.头文件展示"></a>3.头文件展示</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;assert.h&gt;</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAX_PATH 1024</span><br></pre></td></tr></table></figure><p>其中<code>#include&lt;assert.h&gt;</code>用于在程序运行时进行<strong>断言检查</strong>。断言是一种调试工具，用于验证程序中的假设是否成立。如果断言失败，程序会打印一条错误信息并终止执行。</p><p><code>#include&lt;unistd.h&gt;</code>用于使用<code>access(path, F_OK)</code>函数来检查文件是否存在。</p><h3 id="遇到的困难与解决办法"><a href="#遇到的困难与解决办法" class="headerlink" title="遇到的困难与解决办法"></a>遇到的困难与解决办法</h3><ul><li><p>当用户输入了错误的选项（如输入abc，+等不是整型的字符串），程序会进入错误状态，跳过对<code>key</code>的更新，导致使用未定义或之前的值。此时程序在循环中反复提示用户输入，但输入缓冲区未清空，程序进入无限循环。</p><p><strong>解决方案</strong>：清空输入缓存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//清空缓冲区，避免进入死循环</span><br><span class="line">void clearBuffer()</span><br><span class="line">&#123;</span><br><span class="line">    int c;</span><br><span class="line">    while ((c = getchar()) != &#x27;\n&#x27; &amp;&amp; c != EOF);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>用户可能会输入无效文件名或路径，导致程序报错，为避免这种情况，可以在输入命令前，确认路径是否存在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(access(file, F_OK) == 0)&#123;</span><br><span class="line">printf(&quot;文件存在\n&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot;文件不存在\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>学习Linux文件操作命令的集成方法</li><li>理解如何在C语言中处理用户输入和系统调用</li><li>小型文件管理任务的自动化</li></ul><h3 id="项目仓库"><a href="#项目仓库" class="headerlink" title="项目仓库"></a>项目仓库</h3><p>完整代码及相关文件已上传至<a href="https://github.com/dadeibayo666/file-management-system">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 实战项目 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行基础</title>
      <link href="/2025/01/21/learning/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/01/21/learning/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令行基础"><a href="#Linux命令行基础" class="headerlink" title="Linux命令行基础"></a>Linux命令行基础</h1><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>Windows目录结构：  <img src="https://i-blog.csdnimg.cn/blog_migrate/61e2be6cf2ba77f35aa5a79a14577982.png" alt="img"></p><p>Windows目录结构如上图所示<img src="https://i-blog.csdnimg.cn/blog_migrate/7eab8e450c428057fb564ea2eb7632cd.png" alt="img"></p><p>而在Linux的目录结构中，没有盘符的概念，有的只是一个根目录 <code>/</code> ，在根目录下存放的就是一些具体的文件。在Linux中，会把一些硬件设备抽象成文件的形式存放在硬盘上，于是在Linux系统中有这样的一句话：<strong>一切皆文件</strong>。  </p><hr><p><u><strong>相比于Windows上图形化页面为主，用鼠标点击的操作形式</strong></u></p><p><u><strong>Linux上更多不依赖鼠标，而是只使用键盘，所有的操作都能用快捷键和命令行实现。</strong></u></p><p><u><strong>与你交互的只有那个黑框框（命令行终端），所以命令是基础</strong></u></p><h2 id="Linux命令提示符基础格式"><a href="#Linux命令提示符基础格式" class="headerlink" title="Linux命令提示符基础格式"></a>Linux命令提示符基础格式</h2><p>无论是什么命令，用于什么用途，在Linux中，命令有其通用的格式<br>command [-options] [parameter]</p><p>command:命令本身<br>-options:[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节<br>parameter:[可选，非必填]命令的参数，多数用于命令的指向目标等<br><img src="https://i-blog.csdnimg.cn/blog_migrate/7c48e0b8cef0dbb8887471ec688807fc.png" alt="img"></p><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a><code>ls</code></h4><p><code>ls</code>  (list)：  </p><p><code>ls</code> 的作用就是列出当前目录&#x2F;指定目录下的文件或者目录。类似于Windows中的双击某个目录，查看里面具有有哪些东西。  <img src="https://i-blog.csdnimg.cn/blog_migrate/7335753e8ffd772d08b531292b455c77.png" alt="img"></p><p>其中蓝色的是目录（文件夹），白色的是普通文件。  </p><p>在<code>ls</code>后面加上一个指定的路径，就可以查看指定路径下的内容。  </p><p><code>/</code> 是根目录，对标Windows中的“此电脑”。  </p><p>Linux中的任何一个文件都是在 <code>/</code> 根目录下存在的。  </p><p>使用<code>ls -l</code>可以查看其中的具体信息： </p><p> <img src="https://i-blog.csdnimg.cn/blog_migrate/d8e98c4980cd971b6517039aabf22938.png" alt="img"></p><p>此操作类似于Windows中的“显示详细信息”。  </p><p>除了ls-l ，还有ls -a等很多用法（不需要全都记住，了解-a，-l，-k这种比较常用的就行）</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d13834dd2a74f181aa7f182d3441a0bf.png" alt="img"></p><p>上述的这些选项，也叫做命令行参数。  </p><p><strong>注意：命令行的参数与参数之间，需要一个空格进行分割。</strong>  </p><hr><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a><code>cd</code></h4><p><strong><code>cd</code> (change directory)：切换目录</strong>  </p><p>在Linux系统中，磁盘上的文件和目录被组成一个目录树，每个节点都是目录或者文件。  </p><p><strong><code>cd</code>相当于在Windows中资源管理器中双击了某个目录。</strong>  </p><p><code>cd</code>后面跟上你想切换目录的路径，路径可以是相对路径，也可以是绝对路径。  </p><p><strong>示例：</strong>  </p><p>直接切换目录到根目录下： </p><p> <img src="https://i-blog.csdnimg.cn/blog_migrate/217bb0d3f5acbb37bd0a18bf665bcd89.png" alt="img"></p><p>使用绝对路径切换目录：</p><p> <img src="https://i-blog.csdnimg.cn/blog_migrate/e7d47b659dc3de1db4eddc477913cee3.png" alt="img"></p><p>使用相对路径切换目录：</p><p> <img src="https://i-blog.csdnimg.cn/blog_migrate/9617bf68aa85be4cb8d9130235286380.png" alt="img"></p><p><code>cd</code>后面不加任何选项，就会直接跳转到当前用户的home目录。  <img src="https://i-blog.csdnimg.cn/blog_migrate/fcdba653c39c2ab857bed594045fbc24.png" alt="img"></p><p><code>cd</code> 和 <code>ls</code> 是我们最常使用的命令之一。  </p><hr><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a><code>pwd</code></h4><p><code>pwd</code>：显示当前的完整路径（防止用户迷路）</p><p>此命令类似于Windows中鼠标在“此电脑”地址栏中点击一下的效果。  <img src="https://i-blog.csdnimg.cn/blog_migrate/59bc89078a63ebb9d3b9296bb1f36fe5.png" alt="img"></p><p><strong>示例：</strong> </p><p> <img src="https://i-blog.csdnimg.cn/blog_migrate/e7d2bbf8fb910ad5913a8308e97161f8.png" alt="img"></p><hr><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a><code>touch</code></h4><p><code>touch</code>：创建一个空白文件。  </p><p><strong>示例：</strong></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e8b432912209851d35c4cce1cde7000e.png" alt="img"></p><p>执行<code>touch abc.txt</code>后，Linux不会给任何反馈。  </p><p>在Linux中，没有消息就是最好的消息，这意味着命令执行成功了。</p><p>  <img src="https://i-blog.csdnimg.cn/blog_migrate/a69be7c05951a5c272e9e4081ac783a4.png" alt="img"></p><hr><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a><code>cat</code></h4><p><code>cat</code>：读取文件内容。  </p><p><strong>注意：</strong> 如果读取小文件还好，但对于特别大的文件，<code>cat</code>的使用会很不方便。  </p><p><code>cat</code>命令的作用：  </p><ol><li>读取硬盘上的文件；  </li><li>把文件的内容显示在终端上。</li></ol><p><strong>示例：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>可以为<code>cat</code>命令添加参数<code>-n</code>，为读取的内容添加行号：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> -n /etc/passwd</span><br></pre></td></tr></table></figure><hr><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a><code>echo</code></h4><p><code>echo</code>：向文件写入内容。  </p><p><strong>示例：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; abc.txt</span><br></pre></td></tr></table></figure><p>上述命令会将<code>hello</code>写入到<code>abc.txt</code>文件中，之后使用<code>cat</code>查看文件内容：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> abc.txt</span><br></pre></td></tr></table></figure><p>注意：每次执行<code>echo</code>命令时，会覆盖文件的原有内容。  </p><p><strong>示例：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;world&quot;</span> &gt; abc.txt</span><br><span class="line"><span class="built_in">cat</span> abc.txt</span><br></pre></td></tr></table></figure><p><strong>输出：</strong><br>文件内容被覆盖，只剩下“world”。  </p><p><strong>注意：</strong> <code>echo</code>和<code>cat</code>仅适用于简单文件的操作。如果文件比较大或复杂，建议使用其他工具。  </p><hr><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><code>mkdir</code></h4><p><code>mkdir</code>：创建目录。  </p><p>此命令类似于Windows中的右键“新建文件夹”。</p><p><strong>示例：</strong>  </p><p>  <img src="https://i-blog.csdnimg.cn/blog_migrate/60b68b1a1ba3b2a0f7695b27d3d89090.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ddd</span><br></pre></td></tr></table></figure><p>添加命令行参数<code>-p</code>，可递归创建多级目录：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p aaa/bbb/ccc</span><br></pre></td></tr></table></figure><p>此命令会在当前目录下创建<code>aaa</code>目录，在<code>aaa</code>目录下创建<code>bbb</code>，再在<code>bbb</code>下创建<code>ccc</code>目录。  <img src="https://i-blog.csdnimg.cn/blog_migrate/c94e7966773c8e5d62130c03445dbeca.png" alt="img"></p><hr><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p><code>rm</code>：删除文件&#x2F;目录。  </p><p><strong>示例：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> abc.txt</span><br></pre></td></tr></table></figure><p>执行<code>rm</code>命令时，系统会提示确认是否删除文件。  </p><p><strong>递归删除目录：</strong><br>添加命令行参数<code>-r</code>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r aaa</span><br></pre></td></tr></table></figure><p>删除文件夹及其内部文件</p><p><strong>强制删除：</strong><br>添加命令行参数<code>-rf</code>，可强制删除而不进行询问：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ddd</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> Linux中没有回收站的概念，删除即为永久删除。  </p><p><strong>警告：</strong><br>根目录<code>/</code>是Linux的最顶级节点。如果误用<code>rm -rf /</code>命令，系统将彻底损坏。<strong>慎用</strong>。  </p><hr><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a><code>cp</code></h4><p><code>cp</code>：复制文件或目录。  </p><p><strong>复制文件：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> a.txt a1.txt</span><br></pre></td></tr></table></figure><p>上述命令将<code>a.txt</code>文件复制为<code>a1.txt</code>。  </p><p><strong>复制目录：</strong><br>复制目录时，必须添加参数<code>-r</code>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r aa bb</span><br></pre></td></tr></table></figure><p>上述命令将整个<code>aa</code>目录复制到<code>bb</code>目录下。  </p><hr><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a><code>mv</code></h4><p><code>mv</code>：移动或重命名文件&#x2F;目录。  </p><p>如果源文件和目标文件在同一目录下，此命令等同于重命名操作。 </p><p><strong>重命名：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> a.txt b.txt</span><br></pre></td></tr></table></figure><p>上述命令将a.txt重命名为b.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv b.txt ./ab</span><br></pre></td></tr></table></figure><p> 移动文件</p><p><strong>移动并重命名：</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> a.txt aa/a3.txt</span><br></pre></td></tr></table></figure><p>上述命令将<code>a.txt</code>文件移动到<code>aa</code>目录下并重命名为<code>a3.txt</code>。  </p><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>ln：软链接，也称为符号链接，类似于 windows 里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接）</span><br></pre></td></tr></table></figure><p>(1）创建软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /home/lnTest.txt ./lnTxt</span><br></pre></td></tr></table></figure><p>（2）删除软链接： rm -rf 软链接名，而不是 rm -rf 软链接名&#x2F;<br>如果使用 rm -rf 软链接名&#x2F; 删除，会把软链接对应的真实目录下内容删掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf lnTxt</span><br></pre></td></tr></table></figure><h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a><code>chmod</code></h4><p><code>chmod</code>（change mode）是 Linux 和类 Unix 系统中的一个命令，用于修改文件或目录的权限。通过使用 <code>chmod</code>，你可以控制文件或目录的访问权限，决定哪些用户或用户组可以读、写或执行该文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] 模式 文件名</span><br></pre></td></tr></table></figure><ul><li><strong>选项</strong>：常用的选项包括 <code>-R</code>（递归修改目录及其内容的权限）。</li><li><strong>模式</strong>：指定文件的权限，可以使用符号模式（如 <code>rwx</code>）或者数字模式（如 <code>755</code>）来指定。</li><li><strong>文件名</strong>：要修改权限的文件或目录名。</li></ul><h3 id="1-符号模式"><a href="#1-符号模式" class="headerlink" title="1. 符号模式"></a>1. <strong>符号模式</strong></h3><p>在符号模式中，你可以使用以下符号来指定权限：</p><ul><li><code>r</code>：表示读权限（read）。</li><li><code>w</code>：表示写权限（write）。</li><li><code>x</code>：表示执行权限（execute）。</li><li><code>+</code>：添加权限。</li><li><code>-</code>：去除权限。</li><li><code>=</code>：设置精确权限（覆盖之前的权限）。</li></ul><p>符号模式由三部分组成：</p><ol><li><p><strong>用户类别</strong>： </p><ul><li><code>u</code>：文件的拥有者（user）。</li><li><code>g</code>：文件的所属组（group）。</li><li><code>o</code>：其他用户（others）。</li><li><code>a</code>：所有用户（all，等同于 <code>u</code>、<code>g</code>、<code>o</code>）。</li></ul></li><li><p><strong>权限类型</strong>：</p><ul><li><code>r</code>：读权限。</li><li><code>w</code>：写权限。</li><li><code>x</code>：执行权限。</li></ul></li><li><p><strong>操作符</strong>：</p><ul><li><code>+</code>：添加权限。</li><li><code>-</code>：去除权限。</li><li><code>=</code>：设置具体权限。</li></ul></li></ol><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><ul><li><p><strong>授予文件所有者读、写、执行权限，去除其他用户的执行权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+rwx,o-x file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>为所有用户添加执行权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x script.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>设置文件拥有者为读写权限，组和其他用户为只读权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u=rw,g=r,o=r file.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-数字模式"><a href="#2-数字模式" class="headerlink" title="2. 数字模式"></a>2. <strong>数字模式</strong></h3><p>数字模式通过一个三位的数字来表示权限。每一位数字代表用户类别的权限（文件拥有者、文件所属组和其他用户）。每个数字是一个权限值的总和：</p><ul><li>读权限（r）&#x3D; 4</li><li>写权限（w）&#x3D; 2</li><li>执行权限（x）&#x3D; 1</li></ul><p>通过将这些数字加起来来表示不同的权限组合：</p><ul><li><code>7</code> &#x3D; 4 + 2 + 1 &#x3D; 读、写、执行权限（rwx）</li><li><code>6</code> &#x3D; 4 + 2 &#x3D; 读、写权限（rw-）</li><li><code>5</code> &#x3D; 4 + 1 &#x3D; 读、执行权限（r-x）</li><li><code>4</code> &#x3D; 4 &#x3D; 读权限（r–）</li><li><code>3</code> &#x3D; 2 + 1 &#x3D; 写、执行权限（wx-）</li><li><code>2</code> &#x3D; 2 &#x3D; 写权限（w–）</li><li><code>1</code> &#x3D; 1 &#x3D; 执行权限（x–）</li><li><code>0</code> &#x3D; 0 &#x3D; 没有任何权限（—）</li></ul><p>数字模式中，三位数字分别表示文件拥有者、文件所属组和其他用户的权限。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><ul><li><p><strong>为文件设置权限：文件拥有者：读、写、执行；文件所属组：读、执行；其他用户：执行</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 751 file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>为文件设置权限：文件拥有者：读、写；文件所属组和其他用户：读权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 file.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-递归修改目录权限"><a href="#3-递归修改目录权限" class="headerlink" title="3. 递归修改目录权限"></a>3. <strong>递归修改目录权限</strong></h3><p>使用 <code>-R</code> 选项，可以递归地修改目录及其内容的权限。</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><ul><li><strong>递归为目录及其所有文件和子目录设置权限：文件拥有者：读、写、执行；组和其他用户：只读</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 755 /path/to/directory</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-查看文件权限"><a href="#4-查看文件权限" class="headerlink" title="4. 查看文件权限"></a>4. <strong>查看文件权限</strong></h3><p>使用 <code>ls -l</code> 命令可以查看文件或目录的权限。</p><h4 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l file.txt</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-- 1 user group 1234 Jan 7 12:34 file.txt</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>第一个字符 <code>-</code> 表示文件类型（<code>-</code> 为普通文件，<code>d</code> 为目录）。</li><li>接下来的 9 个字符表示文件的权限：<ul><li><code>rwx</code>：文件拥有者（user）有读、写、执行权限。</li><li><code>r-x</code>：文件所属组（group）有读、执行权限。</li><li><code>r--</code>：其他用户（others）只有读权限。</li></ul></li></ul><h3 id="5-常见例子"><a href="#5-常见例子" class="headerlink" title="5. 常见例子"></a>5. <strong>常见例子</strong></h3><ul><li><p><strong>授予文件所有者读、写权限，去除其他用户的写权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+rw,o-w file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>将文件的权限设置为：文件所有者：读、写、执行；其他用户没有任何权限</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 700 file.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>使所有用户都能执行某个脚本文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x script.sh</span><br></pre></td></tr></table></figure></li><li><p><strong>递归更改目录的权限，设置所有者可读、写、执行，其他用户和组只读</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 744 /path/to/directory</span><br></pre></td></tr></table></figure></li></ul><p><code>find</code> 是一个在 Linux 和类 Unix 系统中非常有用的命令，用于在指定目录下搜索符合条件的文件或目录。它可以根据文件名、类型、权限、大小、修改时间等多种条件进行搜索。</p><h4 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [路径] [条件] [操作]</span><br></pre></td></tr></table></figure><ul><li><strong>路径</strong>：指定搜索的起始目录，可以是一个或多个目录。可以使用 <code>.</code> 表示当前目录，或者 <code>/</code> 表示根目录。</li><li><strong>条件</strong>：指定用于匹配文件的标准（如名称、类型、大小、权限等）。</li><li><strong>操作</strong>：对匹配的文件执行的操作，例如删除、输出文件名等。</li></ul><h3 id="常见选项和用法："><a href="#常见选项和用法：" class="headerlink" title="常见选项和用法："></a>常见选项和用法：</h3><ol><li><strong>搜索文件名</strong></li></ol><p>使用 <code>-name</code> 选项来根据文件名进行搜索。可以使用通配符（如 <code>*</code>）来匹配多个文件。</p><h4 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h4><ul><li><p><strong>搜索当前目录下所有名为 <code>example.txt</code> 的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;example.txt&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>搜索当前目录下所有以 <code>.txt</code> 结尾的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.txt&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>搜索所有以大写字母 <code>A</code> 开头的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;A*&quot;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>根据文件类型搜索</strong></li></ol><p>使用 <code>-type</code> 选项来指定要搜索的文件类型。</p><ul><li><code>f</code>：普通文件。</li><li><code>d</code>：目录。</li><li><code>l</code>：符号链接。</li></ul><h4 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h4><ul><li><p><strong>搜索当前目录下所有的目录</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d</span><br></pre></td></tr></table></figure></li><li><p><strong>搜索当前目录下所有的普通文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure></li><li><p><strong>搜索当前目录下所有的符号链接</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> l</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>根据文件大小搜索</strong></li></ol><p>使用 <code>-size</code> 选项可以根据文件的大小进行搜索。大小单位可以是：</p><ul><li><code>c</code>：字节（bytes）。</li><li><code>k</code>：千字节（KB）。</li><li><code>M</code>：兆字节（MB）。</li><li><code>G</code>：千兆字节（GB）。</li></ul><h4 id="示例：-6"><a href="#示例：-6" class="headerlink" title="示例："></a>示例：</h4><ul><li><p><strong>搜索当前目录下大于 100 KB 的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -size +100k</span><br></pre></td></tr></table></figure></li><li><p><strong>搜索当前目录下小于 10 MB 的文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -size -10M</span><br></pre></td></tr></table></figure></li></ul><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a><code>tar</code></h4><h4 id="1-压缩文件"><a href="#1-压缩文件" class="headerlink" title="1. 压缩文件"></a>1. <strong>压缩文件</strong></h4><ul><li><p><strong>创建 <code>.tar.gz</code> 压缩归档文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czf archive.tar.gz /path/to/directory_or_files</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>-c</code>：创建归档文件。</li><li><code>-z</code>：使用 <code>gzip</code> 压缩归档文件。</li><li><code>-f</code>：指定归档文件名 <code>archive.tar.gz</code>。</li><li><code>/path/to/directory_or_files</code>：指定要打包并压缩的文件或目录。</li></ul></li></ul><h4 id="2-解压-tar-gz-文件"><a href="#2-解压-tar-gz-文件" class="headerlink" title="2.解压 .tar.gz 文件"></a>2.解压 <code>.tar.gz</code> 文件</h4><p>使用 <code>-z</code> 选项解压 <code>.tar.gz</code> 文件。</p><ul><li><strong>解压 <code>.tar.gz</code> 文件</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf archive.tar.gz</span><br></pre></td></tr></table></figure>解释：<ul><li><code>-x</code>：提取文件。</li><li><code>-z</code>：使用 <code>gzip</code> 解压归档文件。</li><li><code>-f</code>：指定要解压的归档文件名。</li></ul></li></ul><h1 id="篇幅有限，更多Linux命令参考下列博客学习"><a href="#篇幅有限，更多Linux命令参考下列博客学习" class="headerlink" title="篇幅有限，更多Linux命令参考下列博客学习"></a>篇幅有限，更多Linux命令参考下列博客学习</h1><p><a href="https://blog.csdn.net/leah126/article/details/131558171?ops_request_misc=%7B%22request_id%22:%229e6f422b6204df4166d3b588a5f74080%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=9e6f422b6204df4166d3b588a5f74080&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-131558171-null-null.142%5Ev101%5Epc_search_result_base8&utm_term=linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&spm=1018.2226.3001.4187">Linux入门教程（非常详细）从零基础入门到精通，看完这一篇就够了_linux教程-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/08/hello-world/"/>
      <url>/2025/01/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
